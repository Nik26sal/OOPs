Abstraction
-Abstract method:: the methe which do not have body it only have name they only depends on child class to give body of that function so it is compulsory that 
                   if a child class extends a abstract class than the method that are abstract in nature are overrideen by child class compulsory.

if a class contains the abstract method then the class will declared as  abtract class this class also contains the non abstract method
Object of abstract class is not created
abstract consructors are not make
abstract static method are not written bcz abstract must be overridden but the static are not .final also


Interfaces
to solve the problem  of multiple inheritance the interface are used 
these classes only takes the abstract method
vaiables are final and static by default
contructor not have in it
interfaces extends another interface

Annotation 
it is also an interface

interface have default and static method but it is not inherited or overridden

staic method cannot be inherited





Abstraction
Abstract Method:

An abstract method is a method that does not have a body; it only has a declaration (method signature).
Must be overridden: If a subclass (child class) extends an abstract class, it must provide an implementation for all the abstract methods of the parent class, unless the subclass is also declared as abstract.
Abstract Class:

A class that contains one or more abstract methods must be declared as an abstract class.
An abstract class can also contain non-abstract methods (i.e., methods with a body).
Object creation: You cannot instantiate (create an object of) an abstract class directly.
Constructors in Abstract Classes: Although you cannot create an instance of an abstract class, it can have constructors. These constructors are called when an object of a subclass is created.
Static and Final Methods: You cannot declare abstract static methods because static methods belong to the class, not an instance, and abstract methods need to be overridden by a subclass. Similarly, final methods cannot be abstract because final means the method cannot be overridden.
Interfaces
Purpose:

Interfaces are used to solve the problem of multiple inheritance in languages like Java, where a class can implement multiple interfaces.
Multiple Inheritance: Java does not support multiple inheritance with classes, but it allows a class to implement multiple interfaces.
Abstract Methods:

Traditionally, interfaces could only have abstract methods (i.e., methods without a body).
All methods in an interface are implicitly public and abstract (unless they are default or static).
Variables in Interfaces:

Variables declared in an interface are implicitly public, static, and final. This means they are constants.
Constructors:

Interfaces cannot have constructors because they cannot be instantiated. Constructors are meant for creating instances of a class, and interfaces do not create instances.
Extending Interfaces:

An interface can extend one or more other interfaces. This is how you can build more complex types by combining simpler ones.
Default and Static Methods:

Java 8 introduced default and static methods in interfaces.
Default methods are methods with a body that can be overridden by implementing classes. They are inherited by subclasses unless overridden.
Static methods in interfaces belong to the interface itself and are not inherited by implementing classes. They can be called using the interface name.
Annotations
Annotations as Interfaces:

An annotation is a form of metadata and is technically a special kind of interface in Java.
Annotations are used to provide data about the program but are not part of the program itself. They have no direct effect on the operation of the code they annotate.
Characteristics of Annotations:

Annotations can have methods, but these methods do not have bodies.
Methods in annotations can return values like int, String, enum, or even arrays of these types. These methods are referred to as annotation elements.
When using an annotation, you provide values for these elements.
In summary:

Abstract classes can contain both abstract and non-abstract methods, cannot be instantiated, and can have constructors. Abstract methods must be implemented by subclasses.
Interfaces traditionally contain abstract methods and constants, cannot have constructors, and from Java 8 onward, can have default and static methods. Default methods can be overridden, while static methods cannot be inherited.
Annotations are special interfaces used as metadata. They have methods that do not contain a body but instead define elements for storing metadata values.
